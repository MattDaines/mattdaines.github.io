[{"content":"Hey, hope you\u0026rsquo;re well! There\u0026rsquo;s a few prerequisites that you\u0026rsquo;ll need to meet before this walk through will be useful. Firstly, and hopefully this is obvious, you\u0026rsquo;ll need a Github Pages site published to see the end result; preferably generated by Hugo but I wouldn\u0026rsquo;t be surprised if there was some crossover to other static site generators. Secondly, you\u0026rsquo;ll need your own custom domain. Or, at least the ability to create a CNAME record in the domain you wish to configure. More on that later!\nIf you haven\u0026rsquo;t yet created your static site, I\u0026rsquo;ll take the opportunity to link you to my previous post: Getting started with Hugo Hosted on Github Pages. In the referenced post we configure Hugo, a static site generator and publish the site using Github Actions.\nNow, lets get stuck in.\nUpdate Github Repository Settings   Firstly, go to your Github Pages Repository and go to Settings\n  Navigate to the Github Pages section\n  Add your desired custom domain. You can use either your apex domain (example.com) or a subdomain (www.example.com or blog.example.com).\n  So what does this do? After selecting save, Github commits a single file named CNAME to your publishing branch. If you\u0026rsquo;re unsure what your publishing branch is, it\u0026rsquo;s the branch shown under source just above the custom domain settings. The problem with this is that when Hugo builds our site through Github Actions that CNAME file is removed. So hold off pushing any new changes that will trigger the Github Action for now! Next we\u0026rsquo;ll configure our Custom Domain\u0026rsquo;s DNS.\nUpdate your DNS Settings First, you\u0026rsquo;ll need to decide whether you\u0026rsquo;re going to use your apex domain or a subdomain for your site. Once that\u0026rsquo;s decided, you only need to go through one of the sub sections below.\nUsing a Subdomain   Go to where you manage your domain\u0026rsquo;s DNS configuration. Usually, that is your domain registrar.\n  Add a CNAME record pointing to your Github Page. For me, that means adding a new CNAME record named blog pointing to mattdaines.github.io\n  Initially, I started with a low time-to-live (TTL) for the record. Once I was confident everything was setup and working correctly, I upped the TTL to 24 hours.\nAt the time of writing I don\u0026rsquo;t use my apex domain for anything in particular. So, I\u0026rsquo;ve also setup forwarding on my apex domain to redirect requests to this blog.\nUsing an Apex Domain As I use a subdomain I\u0026rsquo;m less familiar with adding the apex domain as a custom domain but the process appears to be largely similar to adding a subdomain.\n  Go to where you manage your domain\u0026rsquo;s DNS configuration. Usually, that is your domain registrar.\n  Add an A record pointing to the addresses documented in the Github Pages documentation.\n  Preventing CNAME file being removed by Github Actions So, now that we have a custom domain configured how do we prevent our static site generator from removing the required CNAME file that Github creates? Fortunately, with Hugo it\u0026rsquo;s pretty simple!\n  In your site root, create a directory named static\n  Create a file named CNAME - make sure there\u0026rsquo;s no file extension\n  Add your custom domain name to this file. For my site that would mean a file containing blog.mattdaines.me.\n  Remember, you can always reference your publishing branch to check how this file should look.\nBefore we push/PR any changes we should check that this static file is generated.\n  Open a console to the root of your site\n  Run hugo to build the site\n  The site will publish locally under a directory named public. In the public directory you should see a file named CNAME, in all capital letters. The file should contain your custom domain on a single line with no trailing spaces.\n  References And that\u0026rsquo;s it! Here are some references that helped me.\nGithub Pages - Custom Domain with Subdomain\nGithub Pages - Custom Domain with Apex Domain\nHugo - Using a Custom Domain\n","date":"2021-03-07T00:00:00Z","permalink":"https://blog.mattdaines.me/p/adding-a-custom-domain-to-your-hugo-site-on-github-pages/","title":"Adding a Custom Domain to your Hugo Site on Github Pages"},{"content":"The site you\u0026rsquo;re reading now is hosted on Github for free, powered by Github Pages, Hugo (a static site generator) and Jimmy\u0026rsquo;s Stack Theme. This post will describe how to achieve either the same or similar thing for yourself!\nI\u0026rsquo;ve wanted a tech blog for a while I\u0026rsquo;ve started a few only to abandon them and start over a few months later. I just couldn\u0026rsquo;t figure out how I wanted to do it. I first heard about Static blog generators through a Pluralsight video course so I started to look up how I could use a static site generator like Jekyll or Hugo to manage my own blog. I\u0026rsquo;m not a web developer so I knew I wanted something to abstract the complexity away. That\u0026rsquo;s why many blogs before had failed - high maintenance. I might have finally settled on a solution!\nInstalling Hugo Now, I\u0026rsquo;m running on Windows 10 so my experience may differ to yours if you\u0026rsquo;re running on a different operating system.\n  In the next step, we use Chocolatey to install Hugo on your machine. Chocolatey has a PowerShell one-liner that should install Chocolatey on your machine\n  Hugo\u0026rsquo;s documentation gives you many methods to install Hugo on your machine. I used Chocolatey to install Hugo. I had no issues here and Hugo was setup very quickly\n  If everything is setup correctly, running hugo version in a console should return something like: Hugo Static Site Generator v0.78.1-347F2DE6 windows/amd64 BuildDate: 2020-11-05T09:42:11Z\n  Github Repository Setup Github Pages can be setup either per user, organisation or project. For this site, I\u0026rsquo;m creating a user site.\n  Create a public Repository named \u0026lt;YourGithubUserName.github.io\u0026gt;. For a user site, the repository must be public.\n  Create a branch that will be used for the published site. To keep things simple, I kept the default gh-pages.\n  Go to the repository settings, then find the Github Pages section and select the Source branch you just created. For the directory, I\u0026rsquo;m using /(root).\n  Not required but if it\u0026rsquo;s not enabled, why not enable Enforce HTTPS while we\u0026rsquo;re here.\nBe sure to checkout my post on how to add a custom domain to your Github Page!\n  Clone your new repository to your machine and open a console at the root of the local repository\n  New Hugo Site  With your console open and at the root of your new repository run hugo new site .  The . represents this directory. If you prefer, you could run hugo new site blog to build the static site in a new directory under the repository root. If you opt to do this, check that your file paths are updated to reflect the change.\nBuilding and running the site locally It\u0026rsquo;s likely that you\u0026rsquo;ll want view your site as you go through and make changes. Of course, you don\u0026rsquo;t need to but it\u0026rsquo;s a good way of being able to tell when something has broken. All of these commands should be run on the root of the site. For me, that\u0026rsquo;s at the repository root.\n hugo will just build the site hugo server will build changed parts of the site and serve the site on localhost:1313 hugo server --disableFastRender will build the entire site and serve on localhost:1313  I typically run the third command. As my site is currently quite small, it takes less than a second for the site to rebuild.\nGitignore If you ran hugo or hugo server by now you might have noticed that you have a load of changes. These aren\u0026rsquo;t required and are the generated when the site builds. To get around this I two directories to my .gitignore: /public and /resources. You may choose to add more but those two reduced the noise significantly.\nAdding a Hugo Theme There are a large number of Hugo Themes available. Always check the theme\u0026rsquo;s documentation to get started. Generally, from what I\u0026rsquo;ve seen the process is similar though. I use the Stack Hugo Theme and the guide will work to implement this theme.\n  Choose your Hugo Themes\n  Clone your chosen theme into your themes directory: git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack.\n  Add a your theme as a submodule git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack\nThis step is important as it\u0026rsquo;ll ensure you\u0026rsquo;re cloning the latest theme whenever you publish a new post. I guess another way to do this is to this is to run step 2 whenever you want to update the theme.\n  Delete the config.toml where you first created the site.\n  Copy themes/hugo-theme-stack/exampleSite/config.yaml to the site root.\nThis is where you can change various settings for your site. Feel free to take a look now, if you\u0026rsquo;d like.\n  Setting up Github Actions to publish new posts Hugo has a very clear guide for building a static generated site on Github Pages. This is how my Github action started. I\u0026rsquo;ve made some changes to Hugo\u0026rsquo;s documentation such as:\n Adding paths-ignore to not trigger when I\u0026rsquo;m updating something that isn\u0026rsquo;t related to the site. Updated runs-on to ubuntu-latest. If I need to change this to an older version because of some breaking change, I can. Until then though, I\u0026rsquo;d rather use the latest images.  name:github pageson:push:branches:- mainpaths-ignore:- \u0026#39;README.md\u0026#39;- \u0026#39;.gitignore\u0026#39;- \u0026#39;.gitmodules\u0026#39;jobs:deploy:runs-on:ubuntu-lateststeps:- uses:actions/checkout@v2with:submodules:truefetch-depth:0- name:Setup Hugouses:peaceiris/actions-hugo@v2with:hugo-version:\u0026#34;latest\u0026#34;- name:Buildrun:hugo --minify- name:Deployuses:peaceiris/actions-gh-pages@v3with:github_token:${{ secrets.GITHUB_TOKEN }}publish_dir:./publicReferences And that\u0026rsquo;s it! Here are some references that helped me get setup.\nChocolatey\nHugo\nGithub Pages\nHugo Themes\nStack Hugo Theme\nStack Hugo Theme Documentation\nGithub Github Pages Actions\nHugo Hosting on Github\nPluralsight Course: Build a Better Blog with a Static Site Generator - Subscription likely required!\n","date":"2021-03-06T00:00:00Z","permalink":"https://blog.mattdaines.me/p/getting-started-with-hugo-hosted-on-github-pages/","title":"Getting Started with Hugo hosted on Github Pages"},{"content":"I\u0026rsquo;ve recently been ARM templating again! In this article I\u0026rsquo;ll go through how I\u0026rsquo;ve templated a relatively troublesome resource: Microsoft.DevTestLab/labs/policysets/policies. The documentation for this resource type is quite scarce so I figured I\u0026rsquo;d try figure out how to template at least some of the policies. Maybe you\u0026rsquo;ll find something useful.\nDevTest Labs Parent Resource This resource is relatively simple; shouldn\u0026rsquo;t have too much of an issue here! Not going into detail here but for completeness, this is what I used as my parent.\n{ \u0026#34;name\u0026#34;: \u0026#34;[parameters(\u0026#39;devTestLabName\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;location\u0026#34;: \u0026#34;[parameters(\u0026#39;location\u0026#39;)]\u0026#34;, \u0026#34;properties\u0026#34;: { \u0026#34;labStorageType\u0026#34;: \u0026#34;Premium\u0026#34;, \u0026#34;premiumDataDisks\u0026#34;: \u0026#34;Enabled\u0026#34; } } UserOwnedLabVmCount This is where I first realised that threshold only accepts a string. My first assumption was that another field (factData) held strings and threshold held integers. That\u0026rsquo;s not the case.\n{ \u0026#34;name\u0026#34;: \u0026#34;[concat(parameters(\u0026#39;devTestLabName\u0026#39;), \u0026#39;/default/UserOwnedLabVmCount\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs/policysets/policies\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.DevTestLab/labs\u0026#39;, parameters(\u0026#39;devTestLabName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;factName\u0026#34;: \u0026#34;UserOwnedLabVmCount\u0026#34;, \u0026#34;threshold\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;evaluatorType\u0026#34;: \u0026#34;MaxValuePolicy\u0026#34; } } There doesn\u0026rsquo;t appear to be a max value for UserOwnedLabVmCount. I tried 999,999 and it took. If that\u0026rsquo;s something you\u0026rsquo;d like to control in a parameter you can use a parameter of type int where you can set maxValue then for the threshold property use:\n\u0026#34;threshold\u0026#34;: \u0026#34;[string(parameter(\u0026#39;UserOwnedLabVmCountValue\u0026#39;))]\u0026#34; UserOwnedLabPremiumVmCount Practically identical to the above!\n{ \u0026#34;name\u0026#34;: \u0026#34;[concat(parameters(\u0026#39;devTestLabName\u0026#39;), \u0026#39;/default/UserOwnedLabPremiumVmCount\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs/policysets/policies\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.DevTestLab/labs\u0026#39;, parameters(\u0026#39;devTestLabName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;factName\u0026#34;: \u0026#34;UserOwnedLabPremiumVmCount\u0026#34;, \u0026#34;threshold\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;evaluatorType\u0026#34;: \u0026#34;MaxValuePolicy\u0026#34; } } LabVmCount Another practically identical resource to the two previous policies\u0026hellip; If only they were all this easy!\n{ \u0026#34;name\u0026#34;: \u0026#34;[concat(parameters(\u0026#39;devTestLabName\u0026#39;), \u0026#39;/default/LabVmCount\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs/policysets/policies\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.DevTestLab/labs\u0026#39;, parameters(\u0026#39;devTestLabName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;factName\u0026#34;: \u0026#34;LabVmCount\u0026#34;, \u0026#34;threshold\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;evaluatorType\u0026#34;: \u0026#34;MaxValuePolicy\u0026#34; } } LabPremiumVmCount And again\u0026hellip; But this time a little caveat. This policy requires that the DevTest lab property labStorageType is set to Premium. ARM will throw a seemingly unrelated error if this is not set. I learnt this as initially my DevTest lab was set to StandardSSD.\n{ \u0026#34;name\u0026#34;: \u0026#34;[concat(parameters(\u0026#39;devTestLabName\u0026#39;), \u0026#39;/default/LabPremiumVmCount\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs/policysets/policies\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.DevTestLab/labs\u0026#39;, parameters(\u0026#39;devTestLabName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;factName\u0026#34;: \u0026#34;LabPremiumVmCount\u0026#34;, \u0026#34;threshold\u0026#34;: \u0026#34;10\u0026#34;, \u0026#34;evaluatorType\u0026#34;: \u0026#34;MaxValuePolicy\u0026#34; } } LabVmSize Okay, this one is different. Really. It\u0026rsquo;s our first policy that doesn\u0026rsquo;t just require a integer (.. as a string).\nThe solution for LabVmSize is to use a parameter of type array and parse that as a string. The array is just your standard Azure VM sizes in a list. To be verbose, this is the template resource component:\n{ \u0026#34;name\u0026#34;: \u0026#34;[concat(parameters(\u0026#39;devTestLabName\u0026#39;), \u0026#39;/default/LabVmSize\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs/policysets/policies\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.DevTestLab/labs\u0026#39;, parameters(\u0026#39;devTestLabName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;factName\u0026#34;: \u0026#34;LabVmSize\u0026#34;, \u0026#34;threshold\u0026#34;: \u0026#34;[string(parameters(\u0026#39;allowedLabVmSizes\u0026#39;))]\u0026#34;, \u0026#34;evaluatorType\u0026#34;: \u0026#34;AllowedValuesPolicy\u0026#34; } } And the parameter component:\n\u0026#34;allowedLabVmSizes\u0026#34;: { \u0026#34;value\u0026#34;: [ \u0026#34;Basic_A0\u0026#34;, \u0026#34;Basic_A1\u0026#34;, \u0026#34;Basic_A2\u0026#34;, \u0026#34;Basic_A3\u0026#34;, \u0026#34;Basic_A4\u0026#34; ] } GalleryImage This one beat me. I searched for \u0026quot;/default/GalleryImage\u0026quot; and found another blog that had managed to template this value. I wonder if they struggled as much as I did.\nAt first glance this policy is very similar to the one directly above. It accepts a JSON array as a string containing the usual details about the image reference. But for reasons that are beyond my comprehension they wouldn\u0026rsquo;t stick. So, this is the template:\n{ \u0026#34;name\u0026#34;: \u0026#34;[concat(parameters(\u0026#39;devTestLabName\u0026#39;), \u0026#39;/default/GalleryImage\u0026#39;)]\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Microsoft.DevTestLab/labs/policysets/policies\u0026#34;, \u0026#34;apiVersion\u0026#34;: \u0026#34;2018-09-15\u0026#34;, \u0026#34;dependsOn\u0026#34;: [ \u0026#34;[resourceId(\u0026#39;Microsoft.DevTestLab/labs\u0026#39;, parameters(\u0026#39;devTestLabName\u0026#39;))]\u0026#34; ], \u0026#34;properties\u0026#34;: { \u0026#34;status\u0026#34;: \u0026#34;Enabled\u0026#34;, \u0026#34;factName\u0026#34;: \u0026#34;GalleryImage\u0026#34;, \u0026#34;threshold\u0026#34;: \u0026#34;[concat(\u0026#39;[\u0026#39;, trim(parameters(\u0026#39;allowedLabGalleryImages\u0026#39;)), \u0026#39;]\u0026#39;)]\u0026#34;, \u0026#34;evaluatorType\u0026#34;: \u0026#34;AllowedValuesPolicy\u0026#34; } } And as messy as it looks, this is how to provide a parameter file value to this resource.\n\u0026#34;allowedLabGalleryImages\u0026#34;: { \u0026#34;value\u0026#34;: \u0026#34;\\\u0026#34;{\\\\\\\u0026#34;offer\\\\\\\u0026#34;:\\\\\\\u0026#34;WindowsServer\\\\\\\u0026#34;,\\\\\\\u0026#34;publisher\\\\\\\u0026#34;:\\\\\\\u0026#34;MicrosoftWindowsServer\\\\\\\u0026#34;,\\\\\\\u0026#34;sku\\\\\\\u0026#34;:\\\\\\\u0026#34;2019-Datacenter\\\\\\\u0026#34;,\\\\\\\u0026#34;osType\\\\\\\u0026#34;:\\\\\\\u0026#34;Windows\\\\\\\u0026#34;,\\\\\\\u0026#34;version\\\\\\\u0026#34;:\\\\\\\u0026#34;latest\\\\\\\u0026#34;}\\\u0026#34;,\\\u0026#34;{\\\\\\\u0026#34;offer\\\\\\\u0026#34;:\\\\\\\u0026#34;WindowsServer\\\\\\\u0026#34;,\\\\\\\u0026#34;publisher\\\\\\\u0026#34;:\\\\\\\u0026#34;MicrosoftWindowsServer\\\\\\\u0026#34;,\\\\\\\u0026#34;sku\\\\\\\u0026#34;:\\\\\\\u0026#34;2016-Datacenter\\\\\\\u0026#34;,\\\\\\\u0026#34;osType\\\\\\\u0026#34;:\\\\\\\u0026#34;Windows\\\\\\\u0026#34;,\\\\\\\u0026#34;version\\\\\\\u0026#34;:\\\\\\\u0026#34;latest\\\\\\\u0026#34;}\\\u0026#34;\u0026#34; } Not how I wanted it to look, at all. The above parameter value contains two image references that should help with adding additional values if you need to add more. It might help to break the value up onto multiple lines to help visualise what part you\u0026rsquo;ll need to copy/paste.\nUnfinished Policies Unfortunately, I\u0026rsquo;ve not managed to template for policies: UserOwnedLabVmCountInSubnet, LabTargetCost, EnvironmentTemplate and ScheduleEditPermission. I\u0026rsquo;ll come back to them but just in case I don\u0026rsquo;t in the near future (or, ever) I\u0026rsquo;ve listed some references that may or may not be helpful.\nMy approach to find the correct values for each policy has been to make the change in the Azure Portal then retrieve the Policy details back via PowerShell. I used a couple lines of script borrowed from the DevTest Labs documentation\n$lab = Get-AzResource -ResourceType \u0026#39;Microsoft.DevTestLab/labs\u0026#39; -ResourceName myDevTestLab $labResourceName = $lab.Name + \u0026#39;/default\u0026#39; $existingPolicy = (Get-AzResource -ResourceType \u0026#39;Microsoft.DevTestLab/labs/policySets/policies\u0026#39; -ResourceName $labResourceName -ResourceGroupName $lab.ResourceGroupName -ApiVersion 2016-05-15) You can update $existingPolicy whenever you make a change to the policies.\n$existingPolicy.Count - will return the number of configured policy resources. $existingPolicy[0] - will return the first policy configured on the DevTest lab. $existingPolicy[0].Properties - will return the properties of a configured policy. It\u0026rsquo;s this information that you\u0026rsquo;ll need to configure policies. In the case of at least GalleyImage you might find it easier to read if you run $existingPolicy[0].Properties.threshold | ConvertFrom-Json\nReferences ARM Docs: DevTest Labs\nARM Docs: DevTest Labs Policies\nGalleryImage - The blog that helped me solve GalleryImage.\n","date":"2021-02-15T00:00:00Z","permalink":"https://blog.mattdaines.me/p/building-devtest-labs-arm-template-policies/","title":"Building DevTest Labs ARM Template Policies"}]